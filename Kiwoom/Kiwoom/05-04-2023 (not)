import threading,math,sys,time
import win32com.client as win32com
from modules import *
from widgets import *

class Main(QAxWidget):
    CLPH = []
    CHPL = []
    CH = []
    CL = []
    PH = []
    PL = []
    CLPL = []
    매수 = False
    정정 = False
    cCode = ""
    pCode = ""
    cSiga = 0
    pSiga = 0
    cnt1 = 0
    cnt2 = 0
    cCount = 0
    pCount = 0
    sigo1 = 0
    sigo2 = 0

    def __init__(self):
        super().__init__()
        
        # QEventLoop
        # ///////////////////////////////////////////////////////////////
        self.login_event_loop = QEventLoop()
        self.tr_event_loop = QEventLoop()
        
        # Local Dict
        # ///////////////////////////////////////////////////////////////        
        self.balance_dict = {}
        self.revise_order_dict = {}
        
        # Function
        # ///////////////////////////////////////////////////////////////     
        self.get_ocx_instance()
        self.event_slots()
        self.real_event_slot()
        self.request_login_kiwoom()
        self.request_login_info()
        # self.request_tr_balance()
        # self.request_CALL()    
        # self.request_PUT()

        self.SetRealReg(SN_REAL_HOKA,self.fCode,'128','0')


    def get_ocx_instance(self):
        self.setControl("KHOPENAPI.KHOpenAPICtrl.1")
        
        
    def event_slots(self):
        self.OnEventConnect.connect(self.login_slot)
        # self.OnReceiveTrData.connect(self.trdata_slot)


    def real_event_slot(self):
        self.OnReceiveRealData.connect(self.realdata_slot)
        self.OnReceiveChejanData.connect(self.chejan_slot)
        


    def request_login_kiwoom(self):
        self.dynamicCall("CommConnect()")
        self.login_event_loop.exec_()


    def login_slot(self,err_code):
        print(errors(err_code)[1])
        self.login_event_loop.exit()


    def request_login_info(self):
        self.Number = (self.dynamicCall("GetLoginInfo(QString)","ACCLIST"))[:-1] # or "ACCNO" / 계좌번호
        user = self.dynamicCall("GetLoginInfo(QString)","USER_NAME") # 사용자 이름
        fList = self.dynamicCall("GetFutureList()").split(';')
        self.fCode = fList[0]
        when = list(map(int, self.dynamicCall("GetMonthList()").split(';')))
        when.sort()
        self.when = str(when[0])
        print("\n%s님의 계좌번호 %s\n" % (user,self.Number))
        self.Msg("\n%s님의 계좌번호 %s\n" % (user,self.Number))


    def request_tr_balance(self):
        self.dynamicCall("SetInputValue(QString,QString)","계좌번호",self.Number)
        self.dynamicCall("SetInputValue(QString,QString)","비밀번호",'0000')
        self.dynamicCall("SetInputValue(QString,QString)","비밀번호입력매체구분","00")
        self.dynamicCall("CommRqData(QString,QString,QString,QString)","선옵잔고요청","opw20007","0",SN_TR)
        
        self.tr_event_loop.exec_()


    def request_CALL(self):
        self.dynamicCall("SetInputValue(QString,QString)","만기년월",self.when)
        self.dynamicCall("CommRqData(QString,QString,QString,QString)","콜시세요청","OPT50021","0",SN_TR)
        
        self.tr_event_loop.exec_()


    def request_PUT(self):
        self.dynamicCall("SetInputValue(QString,QString)","만기년월",self.when)
        self.dynamicCall("CommRqData(QString,QString,QString,QString)","풋시세요청","OPT50022","0",SN_TR)
        
        self.tr_event_loop.exec_()


    def trdata_slot(self, sScrNo, sRQName, sTrCode, sRecordName, sPrevNext):

        if sRQName == "선옵잔고요청":
            rows = self.dynamicCall("GetRepeatCnt(QString, QString)", sTrCode, sRQName)
            for i in range(rows):
                oCode = self.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, i, "종목코드")
                oCode = oCode.strip()

                medosu = self.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, i, "매도매수구분") # 1:매도,2:매수
                if medosu == '2':
                    medosu = '매수'
                else:
                    medosu = '매도'

                quantity_held = self.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, i, "수량")
                qh = int(quantity_held)

                orderable_quantity = self.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, i, "청산가능수량")
                oq = int(orderable_quantity)

                buy_price = self.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, i, "매입단가")
                bp = round(float(buy_price)*0.001,2)

                buy_amount = self.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, i, "약정금액")
                ba = int(buy_amount)

                self.balance_dict.update({oCode:{'구분':medosu,'보유수량':qh,'주문가능수량':oq,'매입단가':bp,'매입금액':ba,'수익률':0}})

            self.tr_event_loop.exit()

        elif sRQName == "콜시세요청":
            cRows = self.dynamicCall("GetRepeatCnt(QString, QString)", sTrCode, sRQName)
            for c in range(cRows):
                cCode = self.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, c, "종목코드")
                cCode = cCode.strip()

                cActprice = self.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, c, "행사가")
                cActprice = float(cActprice.strip())

                cPrice = self.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, c, "현재가")
                cPrice = float(cPrice.strip().lstrip('+').lstrip('-'))

                cOpen = self.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, c, "시가")
                cOpen = float(cOpen.strip().lstrip('+').lstrip('-'))

                cHigh = self.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, c, "고가")
                cHigh = float(cHigh.strip().lstrip('+').lstrip('-'))

                cLow = self.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, c, "저가")
                cLow = float(cLow.strip().lstrip('+').lstrip('-'))

                option_table_dict.update({cCode:{'행사가':cActprice,'현재가':cPrice,'시가':cOpen,'고가':cHigh,'저가':cLow}})

                if sgMax >= cOpen >= sgMin:
                    self.cCount += 1
                    cDict2.update({cCode:cOpen})
                    # self.dynamicCall("SetRealReg(QString,QString,QString,QString)",SN_REAL,list(cDict2.keys())[self.cCount-1],'20','1')

                    if cOpen == cHigh:
                        self.cnt1 += 1
                        self.sigo1 = self.cnt1
                        trendict.update({'c손절':1})

                if cRows -1 == c:
                    trendict.update({'cSiKo':self.sigo1})
                    self.cnt1 = 0
                    self.cCount = 0

                if bas_max >= option_table_dict[cCode]['현재가'] >= bas_min:
                    cList.append(cCode)
                    cA = cList[0]
                    cB = option_table_dict[cA]['시가']
                    cC = self.get_bro_code(bCode=cA)
                    cD = 0
                    trendict.update({'cCode':{cA:cB},'cCode2':{cC:cD}})

                    real_cCode = str(cA)+';'+str(cC)
                    # self.dynamicCall("SetRealReg(QString,QString,QString,QString)",SN_REAL,real_cCode,'20','0')

            self.tr_event_loop.exit()

        elif sRQName == "풋시세요청":
            pRows = self.dynamicCall("GetRepeatCnt(QString, QString)", sTrCode, sRQName)
            for p in range(pRows):
                pCode = self.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, p, "종목코드")
                pCode = pCode.strip()
                
                pActprice = self.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, p, "행사가")
                pActprice = float(pActprice.strip())

                pPrice = self.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, p, "현재가")
                pPrice = float(pPrice.strip().lstrip('+').lstrip('-'))
                
                pOpen = self.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, p, "시가")
                pOpen = float(pOpen.strip().lstrip('+').lstrip('-'))
                
                pHigh = self.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, p, "고가")
                pHigh = float(pHigh.strip().lstrip('+').lstrip('-'))
                
                pLow = self.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, p, "저가")
                pLow = float(pLow.strip().lstrip('+').lstrip('-'))

                option_table_dict.update({pCode:{'행사가':pActprice,'현재가':pPrice,'시가':pOpen,'고가':pHigh,'저가':pLow}})

                if sgMax >= pOpen >= sgMin:
                    self.pCount += 1
                    pDict2.update({pCode:pOpen})
                    # self.dynamicCall("SetRealReg(QString,QString,QString,QString)",SN_REAL,list(pDict2.keys())[self.pCount-1],'20','1')    

                    if pOpen == pHigh:
                        self.cnt2 += 1
                        self.sigo2 = self.cnt2
                        trendict.update({'p손절':1})

                if pRows -1 == p:
                    trendict.update({'pSiKo':self.sigo2})
                    self.cnt2 = 0
                    self.pCount = 0

                if bas_max >= option_table_dict[pCode]['현재가'] >= bas_min:
                    pList.append(pCode)
                    pA = pList[-1]
                    pB = option_table_dict[pA]['시가']
                    pC = self.get_bro_code(bCode=pA)
                    pD = option_table_dict[pC]['시가']
                    trendict.update({'pCode':{pA:pB},'pCode2':{pC:pD}})
                    real_pCode = str(pA)+';'+str(pC)
                    # self.dynamicCall("SetRealReg(QString,QString,QString,QString)",'2000',real_pCode,'20','1')

            self.tr_event_loop.exit()


    def get_bro_code(self,bCode):
        PM = 2.5
        if bCode[0:1] == "2":
            PM = PM*-1
        a = str(bCode[0:5])
        b = str(math.trunc(option_table_dict[bCode]['행사가'] + PM))
        return a + b


    def chejan_slot(self, sGubun, nItemCnt, sFidList):
        
        if int(sGubun) == 0: # 접수와 체결
            oCode = self.dynamicCall("GetChejanData(int)", 9001) # 종목코드

            medosu = self.dynamicCall("GetChejanData(int)", 905) # 구분
            medosu = medosu.strip().lstrip('+').lstrip('-')

            order_number = self.dynamicCall("GetChejanData(int)", 9203) # 주문번호
            on = int(order_number)

            order_q = self.dynamicCall("GetChejanData(int)", 900) # 주문수량

            un_quan = self.dynamicCall("GetChejanData(int)", 902) # 미체결수량
            un_quan = int(un_quan)

            one_order_number = self.dynamicCall("GetChejanData(int)", 904) # 원주문번호
            oon = int(one_order_number)

            order_price = self.dynamicCall("GetChejanData(int)", 901) # 주문가격

            price = self.dynamicCall("GetChejanData(int)", 10) # 현재가

            rPrice1 = self.dynamicCall("GetChejanData(int)", 28) # 최우선 매수호가1

            if un_quan == 0 and (("취소" not in medosu)):
                print("\n%s 체결 | No.%s | %s | 주문가: %s | 주문수량: %s개 | 미체결량: %s개"%(medosu,on,oCode,order_price,order_q,un_quan))
            else:
                self.revise_order_dict = ({'종목코드':oCode,'구분':medosu,'주문번호':on,'주문수량':order_q,'주문가격':order_price,'미체결수량':un_quan,'원주문번호':oon,'매수호가':rPrice1,'현재가':price})
                if order_price == 0:
                    print("%s 접수 | No.%s | %s | 시장가 | 주문수량: %s개 | 미체결량: %s개 | 현재가: %s"%(medosu,on,oCode,order_q,un_quan,price))
                else:
                    print("%s 접수 | No.%s | %s | 주문가: %s | 주문수량: %s개 | 미체결량: %s개 | 현재가: %s"%(medosu,on,oCode,order_price,order_q,un_quan,price))


    def realdata_slot(self, Code, RealType, RealData):

        if RealType == "선물호가잔량":

            순매수잔량 = self.GetCommRealData(Code,128) # 순매수잔량
            순매수잔량 = int(순매수잔량)
            print(순매수잔량)
            # if (trendict['cSiKo'] + trendict['pSiKo']) == 0:
            #     if len(self.CLPH) > 0:
            #         trendict.update({'추세':'CALL'})
            #     elif len(self.CHPL) > 0:
            #         trendict.update({'추세':'PUT'})
            #     else:
            #         trendict.update({'추세':'NOT_BOTH'})
            # else:
            #     if 순매수잔량 > c호가 and (trendict['pSiKo'] > trendict['cSiKo'] == 0):
            #         trendict.update({'추세':'CALL'})
            #     elif 순매수잔량 < p호가 and (trendict['cSiKo'] > trendict['pSiKo'] == 0):
            #         trendict.update({'추세':'PUT'})


        # elif RealType == "옵션시세":
            
        #     rPrice = self.dynamicCall("GetCommRealData(QString,int)",Code,10) # 현재가
        #     rPrice = abs(float(rPrice))

        #     rOpen = self.dynamicCall("GetCommRealData(QString,int)",Code,16)  # 시가
        #     rOpen = abs(float(rOpen))

        #     rHigh = self.dynamicCall("GetCommRealData(QString,int)",Code,17)  # 고가
        #     rHigh = abs(float(rHigh))

        #     rLow = self.dynamicCall("GetCommRealData(QString,int)",Code,18)  # 저가
        #     rLow = abs(float(rLow))

        #     rHoka = self.dynamicCall("GetCommRealData(QString,int)",Code,28) # (최우선)매수호가
        #     rHoka = abs(float(rHoka))

        #     real_dict.update({rOpen:{'현재가':rPrice,'고가':rHigh,'저가':rLow,'매수호가':rHoka}})
            
            # BUY
            # ///////////////////////////////////////////////////////////////
            # if self.balance_dict == {} and self.매수 == False:

            #     if trendict['추세'] == 'CALL' and real_dict['cbHoka'] != 0:
            #         self.매수 = True
            #         print("Call 매수 시작")
            #         bState = self.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,int,QString,QString)",[
            #             "매수",SN_ORDER,self.Number,real_dict['cCode'],'1','2','1',수량,real_dict['매수호가'],'0'
            #             ])
            #         if bState == 0:
            #             print("%s 매수주문 성공"%real_dict['cCode'])
            #         else:
            #             print("%s 매수주문 실패"%real_dict['cCode'])

            #     if trendict['추세'] == 'PUT' and real_dict['pbHoka'] != 0:
            #         self.매수 = True
            #         print("Put 매수 시작")
            #         bState = self.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,int,QString,QString)",[
            #             "매수",SN_ORDER,self.Number,real_dict['pCode'],'1','2','1',수량,real_dict['매수호가'],'0'
            #             ])
            #         if bState == 0:
            #             print("%s 매수주문 성공"%real_dict['pCode'])
            #         else:
            #             print("%s 매수주문 실패"%real_dict['pCode'])
                        
            # CORRECTION
            # ///////////////////////////////////////////////////////////////
            
            #     if self.정정 == False: # 정정
            #         if self.revise_order_dict != {} and (self.revise_order_dict['종목코드'] not in self.balance_dict['종목코드']): # 주문 정정
            #             if str(self.revise_order_dict['주문수량']) == str(self.revise_order_dict['미체결수량']) and self.revise_order_dict['구분'] == "매수":
            #                 rCode = self.revise_order_dict['종목코드']
            #                 rOrderNo = self.revise_order_dict['주문번호']
            #                 rOP = self.revise_order_dict['주문가격']
            #                 rPrice = self.revise_order_dict['매수호가']
            #                 rUq= self.revise_order_dict['미체결수량']

            #                 if rCode == real_dict['cCode']:
            #                     self.revise_order_dict.update({'현재가':real_dict['cPrice']})
            #                 else:
            #                     self.revise_order_dict.update({'현재가':real_dict['pPrice']})
            #                 price = self.revise_order_dict['현재가']

            #                 if float(price) > (float(rOP) + OCR):
            #                     self.정정 = True
            #                     print("%s 정정 주문 시작 %s %s"% (rCode,float(price),float(rOP)))
            #                     order_success = self.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,int,QString,QString)",[
            #                         "주문정정",SN_ORDER,self.Number,rCode,'2','2','1',rUq,rPrice,rOrderNo
            #                         ])
            #                     if order_success == 0:
            #                         print("%s 정정주문 성공" % rCode)
            #                         self.revise_order_dict = {}
            #                     else:
            #                         print("%s 정정주문 실패" % rCode)
            
            # SELL
            # ///////////////////////////////////////////////////////////////
            # if self.balance_dict != {}:
            #     oCode = self.balance_dict['종목코드']
            #     if b == option_table_dict[oCode]['시가']:
            #         f수익률 = self.balance_dict['보유수량']*250000
            #         매입금액 = f수익률*self.balance_dict['매입단가']
            #         평가금액 = f수익률*a
            #         ROR = round((((평가금액-매입금액)/매입금액*100) - 수수료),2)
            #         self.balance_dict.update({'수익률':ROR})
            #         print(self.balance_dict)
            #     if int(self.balance_dict['보유수량']) > 0:
            #         if self.매수 == False:
            #             self.매수 = True
            #         else:
            #             if oCode[0:1] == '2' and real_dict['cPrice'] != 0: # 콜 매도
            #                 ea1 = (real_dict['cPrice']*qh*250000)
            #                 self.balance_dict.update({'평가금액':ea1})
            #                 self.balance_dict.update({'현재가':real_dict['cPrice']})
            #                 ror = round((((ea1-ca)/ca*100) - 0.33),2)
            #                 self.balance_dict.update({'수익률':ror})
            #                 print(ror)
            #                 if (ror <= 손절) or (ror >= 이익) or (real_dict['cPrice'] == real_dict['cLow2']): # 수익률 매도
            #                     print("[%s] 수익률: %s 매도 주문 시작" % (oCode,ror))
            #                     self.매수 = False
            #                     sState = self.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,QString,QString,QString)",[
            #                         "매도",SN_ORDER,self.Number,oCode,'1','1','3',oq,'0',''
            #                         ])
            #                     if sState != 0:
            #                         print("%s 매도주문 실패" % oCode)
            #                     else:
            #                         print("%s 매도주문 성공" % oCode)
            #                         self.balance_dict = {}

            #                 if trendict['p손절'] == 1 and trendict['pSiKo'] == 0:
            #                     print("시가 고가 손절매도 %s self.balance_dict"% self.balance_dict)
            #                     self.매수 = False
            #                     trendict.update = ({'c손절':0})
            #                     print("[%s] Put 가격 변동 확인됨 --- Call 손절 주문" % oCode)
            #                     sState = self.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,int,QString,QString)",[
            #                         "매도",SN_ORDER,self.Number,oCode,'1','1','3',oq,'0',''
            #                         ])
            #                     if sState != 0:
            #                         print("%s 매도주문 실패" % oCode)
            #                     else:
            #                         print("%s 매도주문 성공" % oCode)
            #                         self.balance_dict = {}
            #                         bState = self.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,int,QString,QString)",[
            #                             "매수",SN_ORDER,self.Number,real_dict['pCode'],'1','2','1',수량,real_dict['pbHoka'],'0'
            #                             ])
            #                         if bState == 0:
            #                             print("%s 매수주문 성공"%real_dict['pCode'])
            #                         else:
            #                             print("%s 매수주문 실패"%real_dict['pCode'])

            #             if oCode[0:1] == '3' and real_dict['pPrice'] != 0: # 풋 매도
            #                 ea2 = (real_dict['pPrice']*qh*250000)
            #                 self.balance_dict.update({'평가금액':int(ea2)})
            #                 self.balance_dict.update({'현재가':real_dict['pPrice']})
            #                 ror = round((((ea2-ca)/ca*100) - 0.33),2)
            #                 self.balance_dict.update({'수익률':ror})
            #                 print(ror)
            #                 if trendict['c손절'] == 1 and trendict['cSiKo'] == 0:
            #                     print("시가 고가 손절매도 %s self.balance_dict"% self.balance_dict)
            #                     self.매수 = False
            #                     trendict.update = ({'p손절':0})
            #                     print("[%s] Call 가격 변동 확인됨 --- Put 손절 주문" % oCode)
            #                     sState = self.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,int,QString,QString)",[
            #                         "매도",SN_ORDER,self.Number,oCode,'1','1','3',oq,'0',''
            #                         ])
            #                     if sState != 0:
            #                         print("%s 매도주문 실패" % oCode)
            #                         bState = self.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,int,QString,QString)",[
            #                             "매수",SN_ORDER,self.Number,real_dict['cCode'],'1','2','1',수량,real_dict['cbHoka'],'0'
            #                             ])
            #                         if bState == 0:
            #                             print("%s 매수주문 성공"%real_dict['cCode'])
            #                         else:
            #                             print("%s 매수주문 실패"%real_dict['cCode'])
            #                     else:
            #                         self.balance_dict = {}
            #                         print("%s 매도주문 성공" % oCode)


            #                 if (ror <= 손절) or (ror >= 이익) or (real_dict['pPrice'] == real_dict['pLow2']): # 수익률 매도
            #                     print("[%s] 수익률: %s 매도 주문 시작" % (oCode,ror))
            #                     self.매수 = False
            #                     sState = self.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,QString,QString,QString)",[
            #                         "매도",SN_ORDER,self.Number,oCode,'1','1','3',oq,'0',''
            #                         ])
            #                     if sState != 0:
            #                         print("%s 매도주문 실패" % oCode)
            #                     else:
            #                         self.balance_dict = {}
            #                         print("%s 매도주문 성공" % oCode)


            #         if oCode != (real_dict['cCode'] and real_dict['pCode']):
            #             if (ror <= 손절) or (ror >= 이익):
            #                 sState = self.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,QString,QString,QString)",[
            #                     "매도",SN_ORDER,self.Number,oCode,'1','1','3',oq,'0',''
            #                     ])
            #                 if sState != 0:
            #                     print("%s 매도주문 실패" % oCode)
            #                 else:
            #                     self.balance_dict = {}
            #                     print("%s 매도주문 성공" % oCode)


    def SetRealReg(self, ScreenNo, CodeList, FidList, OptType):
        self.dynamicCall("SetRealReg(QString, QString, QString, QString)", ScreenNo, CodeList, FidList, OptType)

    def DisConnectRealData(self, ScreenNo):
        self.dynamicCall("DisConnectRealData(QString)", ScreenNo)

    def GetCommRealData(self, Code, Fid):
        self.dynamicCall("GetCommRealData(QString, int)", Code, Fid) 



    def Msg(self,text=None):
        Slack.post_message(slack,"#message",text)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    Main()
    app.exec_()
