import pythoncom,threading,math,time,sys
import win32com.client as win32com
from PyQt5.QAxContainer import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from errorCode import *
from Info import *
from slack import *


class Main(QAxWidget):
    Number = ""
    balance_dict = {}
    revise_order_dict = {}
    a = {}
    t2301 = None
    매수 = False
    정정 = False
    cCode = ""
    pCode = ""
    cSiga = 0
    pSiga = 0
    cnt1 = 0
    cnt2 = 0
    sigo1 = 0
    sigo2 = 0

    def __init__(self):
        super().__init__()
        Main.login_event_loop = QEventLoop()
        Main.Call_Trend = QEventLoop()
        Main.Put_Trend = QEventLoop()
        Main.kiwoom = QAxWidget("KHOPENAPI.KHOpenAPICtrl.1")

        Main.event_slots()
        Main.real_event_slot()
        Main.request_login_kiwoom()
        Main.request_login_info()
        Main.request_tr_balance()
        Main.request_콜시세()
        Main.request_풋시세()
        Main.kiwoom.dynamicCall("SetRealReg(QString,QString,QString,QString)",'8000',fCode,128,'0')
        
    @staticmethod
    def Msg(text=None):
        Slack.post_message(slack,"#message",text)

    def event_slots():
        Main.kiwoom.OnEventConnect.connect(Main.login_slot)
        Main.kiwoom.OnReceiveTrData.connect(Main.tr_data)

    def real_event_slot():
        Main.kiwoom.OnReceiveChejanData.connect(Main.chejan_slot)
        Main.kiwoom.OnReceiveRealData.connect(Main.realdata_slot)

    def request_login_kiwoom():
        Main.kiwoom.dynamicCall("CommConnect()")
        Main.login_event_loop.exec_()

    def login_slot(err_code):
        print(errors(err_code)[1])
        Main.login_event_loop.exit()    


    def request_login_info():
        num = Main.kiwoom.dynamicCall("GetLoginInfo(QString)","ACCLIST") # or "ACCNO" / 계좌번호
        Main.Number = num[:-1]
        user = Main.kiwoom.dynamicCall("GetLoginInfo(QString)","USER_NAME") # 사용자 이름
        print("\n%s님의 계좌번호 %s\n" % (user,Main.Number))
        Main.Msg(text="%s님의 계좌번호: %s" %(user,Main.Number))


    def request_tr_balance():
        time.sleep(1)
        Main.kiwoom.dynamicCall("SetInputValue(QString,QString)","계좌번호",Main.Number)
        Main.kiwoom.dynamicCall("SetInputValue(QString,QString)","비밀번호",'0000')
        Main.kiwoom.dynamicCall("SetInputValue(QString,QString)","비밀번호입력매체구분","00")
        Main.kiwoom.dynamicCall("CommRqData(QString,QString,QString,QString)","선옵잔고요청","opw20007","0","1000")


    def request_콜시세():
        time.sleep(1)
        Main.kiwoom.dynamicCall("SetInputValue(QString,QString)","만기년월",'202305')
        Main.kiwoom.dynamicCall("CommRqData(QString,QString,QString,QString)","콜시세요청","OPT50021","0","5000")
        Main.Call_Trend.exec_()


    def request_풋시세():
        time.sleep(1)
        Main.kiwoom.dynamicCall("SetInputValue(QString,QString)","만기년월",'202305')
        Main.kiwoom.dynamicCall("CommRqData(QString,QString,QString,QString)","풋시세요청","OPT50022","0","6000")
        Main.Put_Trend.exec_()


    def tr_data(sScrNo, sRQName, sTrCode, sRecordName, sPrevNext):

        if sRQName == "선옵잔고요청":
            rows = Main.kiwoom.dynamicCall("GetRepeatCnt(QString, QString)", sTrCode, sRQName)
            if rows > 0:
                for i in range(rows):
                    oCode = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, i, "종목코드")
                    oCode = oCode.strip()
                    
                    medosu = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, i, "매도매수구분") # 1:매도,2:매수
                    if medosu == '2':
                        medosu = '매수'
                    else:
                        '매도'
                    quantity_held = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, i, "수량")
                    qh = int(quantity_held)

                    orderable_quantity = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, i, "청산가능수량")
                    oq = int(orderable_quantity)
                    
                    buy_price = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, i, "매입단가")
                    bp = round(float(buy_price)*0.001,2)

                    price = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, i, "현재가")
                    p = round(float(price)*0.001,2)
                                            
                    contract_amount = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, i, "약정금액")
                    ca = int(contract_amount)
                    
                    evaluation_amount = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, i, "평가금액")
                    ea = int(evaluation_amount)
                    
                    ror = round((((ea-ca)/ca*100) - 0.33),2)

                    Main.balance_dict.update({'종목코드': oCode,'구분':medosu,'보유수량':qh,'주문가능수량':oq,'매입단가':bp,'현재가':p,'약정금액':ca,'평가금액':ea,'수익률':ror})
            else:
                if Main.balance_dict != {}:
                    Main.balance_dict = {}
            

        elif sRQName == "콜시세요청":
            cRows = Main.kiwoom.dynamicCall("GetRepeatCnt(QString, QString)", sTrCode, sRQName)
            for c in range(cRows):
                cCode = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, c, "종목코드")
                cCode = cCode.strip()
                
                cActprice = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, c, "행사가")
                cActprice = float(cActprice.strip())
                
                cPrice = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, c, "현재가")
                cPrice = float(cPrice.strip().lstrip('+').lstrip('-'))

                cOpen = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, c, "시가")
                cOpen = float(cOpen.strip().lstrip('+').lstrip('-'))

                cHigh = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, c, "고가")
                cHigh = float(cHigh.strip().lstrip('+').lstrip('-'))

                cLow = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, c, "저가")
                cLow = float(cLow.strip().lstrip('+').lstrip('-'))
                
                if (sgMax >= (cOpen and cHigh) >= sgMin) and cOpen == cHigh:
                    Main.cnt1 += 1
                    Main.sigo1 = Main.cnt1
                    trendict.update({'c손절':1})

                if cRows -1 == c:
                    trendict.update({'cSiKo':Main.sigo1})
                    Main.cnt1 = 0

                if cCode not in option_table_dict:
                    option_table_dict.update({cCode:{'행사가':cActprice,'현재가':cPrice,'시가':cOpen,'고가':cHigh,'저가':cLow}})

                if bas_max >= cPrice >= bas_min:
                    cList.append(cCode)
                    trendict.update({'cCode':cList[0]})
                    real_dict.update({'cCode':trendict['cCode']})
                    trendict.update({'cSiga':option_table_dict[trendict['cCode']]['시가']})
                    real_dict.update({'cSiga':trendict['cSiga']})
                    trendict.update({'cCode2':(str(trendict['cCode'][0:5]) + str(math.trunc(float(option_table_dict[trendict['cCode']]['행사가']) - 2.5)))})
                    real_dict.update({'cCode2':trendict['cCode2']})

                if trendict['cCode2'] == cCode and trendict['cSiga2'] == 0:
                    trendict.update({'cSiga2':option_table_dict[trendict['cCode2']]['시가']})
                    real_dict.update({'cSiga2':trendict['cSiga2']})
                    real_cCode = str(trendict['cCode'])+';'+str(trendict['cCode2']) # ';'+str(trendict['cCode3']
                    Main.kiwoom.dynamicCall("SetRealReg(QString,QString,QString,QString)",'8000',real_cCode,'20','1')
                    # trendict.update({'cCode3':(str(trendict[cList[0]][0:5]) + str(math.trunc(float(option_table_dict[c행사가]['행사가']) - 5.0)))}) # 콜 2번째 형님 종목코드
            Main.Call_Trend.exit()


        elif sRQName == "풋시세요청":
            pRows = Main.kiwoom.dynamicCall("GetRepeatCnt(QString, QString)", sTrCode, sRQName)
            for p in range(pRows):
                pCode = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, p, "종목코드")
                pCode = pCode.strip()
                
                pActprice = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, p, "행사가")
                pActprice = float(pActprice.strip())

                pPrice = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, p, "현재가")
                pPrice = float(pPrice.strip().lstrip('+').lstrip('-'))
                
                pOpen = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, p, "시가")
                pOpen = float(pOpen.strip().lstrip('+').lstrip('-'))
                
                pHigh = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, p, "고가")
                pHigh = float(pHigh.strip().lstrip('+').lstrip('-'))
                
                pLow = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, p, "저가")
                pLow = float(pLow.strip().lstrip('+').lstrip('-'))
                
                if pCode not in option_table_dict:
                    option_table_dict.update({pCode:{'행사가':pActprice,'현재가':pPrice,'시가':pOpen,'고가':pHigh,'저가':pLow}})
                    
                if (sgMax >= (pOpen and pHigh) >= sgMin) and pOpen == pHigh:
                    Main.cnt2 += 1
                    Main.sigo2 = Main.cnt2
                    trendict.update({'p손절':1})

                if pRows -1 == p:
                    trendict.update({'pSiKo':Main.sigo2})
                    Main.cnt2 = 0

                if bas_max >= pPrice >= bas_min:
                    pList.append(pCode)
                    trendict.update({'pCode':pList[-1]})
                    real_dict.update({'pCode':trendict['pCode']})
                    trendict.update({'pSiga':option_table_dict[trendict['pCode']]['시가']})
                    real_dict.update({'pSiga':trendict['pSiga']})
                    trendict.update({'pCode2':(str(trendict['pCode'][0:5]) + str(math.trunc(float(option_table_dict[trendict['pCode']]['행사가']) + 2.5)))})
                    real_dict.update({'pCode2':trendict['pCode2']})
                    trendict.update({'pSiga2':option_table_dict[trendict['pCode2']]['시가']})
                    real_dict.update({'pSiga2':trendict['pSiga2']})
                    real_pCode = str(trendict['pCode'])+';'+str(trendict['pCode2']) # ';'+str(trendict['pCode3']
                    Main.kiwoom.dynamicCall("SetRealReg(QString,QString,QString,QString)",'8000',real_pCode,'20','1')
                    # real_dict.update({'pCode3':(str(real_dict['cCode'][0:5]) + str(math.trunc(float(option_table_dict[p행사가]['행사가']) + 5.0)))})

                if trendict['pCode2'] == pCode and trendict['pSiga2'] == 0:
                    trendict.update({'pSiga2':pOpen})
            Main.Put_Trend.exit()    


    def chejan_slot(Gubun, nItemCnt, sFidList):

        if int(Gubun) == 0: # 접수와 체결
            oCode = Main.kiwoom.dynamicCall("GetChejanData(int)", 9001) # 종목코드

            medosu = Main.kiwoom.dynamicCall("GetChejanData(int)", 905) # 구분
            medosu = medosu.strip().lstrip('+').lstrip('-')

            order_number = Main.kiwoom.dynamicCall("GetChejanData(int)", 9203) # 주문번호
            on = int(order_number)

            order_q = Main.kiwoom.dynamicCall("GetChejanData(int)", 900) # 주문수량

            un_quan = Main.kiwoom.dynamicCall("GetChejanData(int)", 902) # 미체결수량
            un_quan = int(un_quan)

            one_order_number = Main.kiwoom.dynamicCall("GetChejanData(int)", 904) # 원주문번호
            oon = int(one_order_number)

            order_price = Main.kiwoom.dynamicCall("GetChejanData(int)", 901) # 주문가격

            price = Main.kiwoom.dynamicCall("GetChejanData(int)", 10) # 현재가

            rPrice1 = Main.kiwoom.dynamicCall("GetChejanData(int)", 28) # 최우선 매수호가1

            if un_quan == 0 and (("취소" not in medosu)):
                print("\n%s 체결 | No.%s | %s | 주문가: %s | 주문수량: %s개 | 미체결량: %s개"%(medosu,on,oCode,order_price,order_q,un_quan))
            else:
                Main.revise_order_dict = ({'종목코드':oCode,'구분':medosu,'주문번호':on,'주문수량':order_q,'주문가격':order_price,'미체결수량':un_quan,'원주문번호':oon,'매수호가':rPrice1,'현재가':price})
                if order_price == 0:
                    print("%s 접수 | No.%s | %s | 시장가 | 주문수량: %s개 | 미체결량: %s개 | 현재가: %s"%(medosu,on,oCode,order_q,un_quan,price))
                else:
                    print("%s 접수 | No.%s | %s | 주문가: %s | 주문수량: %s개 | 미체결량: %s개 | 현재가: %s"%(medosu,on,oCode,order_price,order_q,un_quan,price))


    def realdata_slot(oCode, RealType):

        if RealType == "선물호가잔량":
            순매수잔량 = Main.kiwoom.dynamicCall("GetCommRealData(QString,int)",fCode,128) # 순매수잔량
            순매수잔량 = int(순매수잔량)

            if (순매수잔량 > c호가) and (trendict['cSiKo'] < trendict['pSiKo']) and (trendict['cSiKo'] == 0):
                trendict.update({'추세':'CALL'})
            elif (순매수잔량 < p호가) and (trendict['cSiKo'] > trendict['pSiKo']) and (trendict['pSiKo'] == 0):
                trendict.update({'추세':'PUT'})
            else:
                trendict.update({'추세':'NOT_BOTH'})

            # print(trendict)

        elif RealType == "옵션시세":

            a = Main.kiwoom.dynamicCall("GetCommRealData(QString,int)",oCode,10) # 현재가
            a = abs(float(a))

            b = Main.kiwoom.dynamicCall("GetCommRealData(QString,int)",oCode,16)  # 시가
            b = abs(float(b))

            c = Main.kiwoom.dynamicCall("GetCommRealData(QString,int)",oCode,18)  # 저가
            c = abs(float(c))

            d = Main.kiwoom.dynamicCall("GetCommRealData(QString,int)",oCode,28) # (최우선)매수호가
            d = abs(float(d))

            if b == trendict['cSiga']:
                real_dict.update({'cPrice':a,'cbHoka':d})

            elif b == trendict['pSiga']:
                real_dict.update({'pPrice':a,'pbHoka':d})

            elif b == trendict['cSiga2']:
                real_dict.update({'cLow2':c})

            elif b == trendict['pSiga2']:
                real_dict.update({'pLow2':c})

            if Main.balance_dict == {}:
                if Main.매수 == False:
                    if trendict['추세'] == 'CALL':
                        Main.매수 = True
                        print("Call 매수 시작")
                        bState = Main.kiwoom.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,int,QString,QString)",["매수","2000",Main.Number,real_dict['cCode'],'1','2','1',수량,real_dict['cbHoka'],'0'])
                        if bState == 0:
                            print("%s 매수주문 성공"%real_dict['cCode'])
                        else:
                            print("%s 매수주문 실패"%real_dict['cCode'])

                    if trendict['추세'] == 'PUT':
                        Main.매수 = True
                        print("Put 매수 시작")
                        bState = Main.kiwoom.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,int,QString,QString)",["매수","2000",Main.Number,real_dict['pCode'],'1','2','1',수량,real_dict['pbHoka'],'0'])
                        if bState == 0:
                            print("%s 매수주문 성공"%real_dict['pCode'])
                        else:
                            print("%s 매수주문 실패"%real_dict['pCode'])
                else:
                    Main.매수 == False

                if Main.정정 == False: # 정정
                    if (Main.revise_order_dict != {}) and (Main.revise_order_dict['종목코드'] not in Main.balance_dict.values()): # 주문 정정

                        if str(Main.revise_order_dict['주문수량']) == str(Main.revise_order_dict['미체결수량']) and Main.revise_order_dict['구분'] == "매수":
                            rCode = Main.revise_order_dict['종목코드']
                            rOrderNo = Main.revise_order_dict['주문번호']
                            rOP = Main.revise_order_dict['주문가격']
                            rPrice = Main.revise_order_dict['매수호가']
                            rUq= Main.revise_order_dict['미체결수량']

                            if rCode == real_dict['cCode']:
                                Main.revise_order_dict.update({'현재가':real_dict['cPrice']})
                            else:
                                Main.revise_order_dict.update({'현재가':real_dict['pPrice']})
                            price = Main.revise_order_dict['현재가']


                            if float(price) > (float(rOP) + OCR):
                                Main.정정 = True
                                print("%s 정정 주문 시작 %s %s"% (rCode,float(price),float(rOP)))
                #                 order_success = Main.kiwoom.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,int,QString,QString)",["주문정정","3000",Main.Number,rCode,'2','2','1',rUq,rPrice,rOrderNo])
                #                 if order_success == 0:
                #                     print("%s 정정주문 성공" % rCode)
                #                     Main.revise_order_dict = {}
                #                 else:
                #                     print("%s 정정주문 실패" % rCode)

            else:
                oCode = Main.balance_dict['종목코드']
                qh = int(Main.balance_dict['보유수량'])
                ca = int(Main.balance_dict['약정금액'])
                oq = int(Main.balance_dict['주문가능수량'])
                수익률 = float(Main.balance_dict['수익률'])

                if Main.매수 == True:
                    if real_dict['cCode'] == oCode: # 콜 매도
                        ea1 = (real_dict['cPrice']*qh*250000)
                        Main.balance_dict.update({'평가금액':ea1})
                        Main.balance_dict.update({'현재가':real_dict['cPrice']})
                        ror = round((((ea1-ca)/ca*100) - 0.31),2)
                        Main.balance_dict.update({'수익률':ror})

                        if (ror <= 손절) or (ror >= 이익) or (real_dict['cPrice'] == real_dict['cLow2']): # 수익률 매도
                            print("[%s] 수익률: %s 매도 주문 시작" % (oCode,ror))
                            Main.매수 = False
                            sState = Main.kiwoom.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,QString,QString,QString)",["매도","2000",Main.Number,oCode,'1','1','3',oq,'0',''])
                            if sState != 0:
                                print("%s 매도주문 실패" % oCode)
                            else:
                                Main.balance_dict = {}
                                print("%s 매도주문 성공" % oCode)
                        콜수 = ("콜 수익률: %s" % ror)
                        print(콜수)
                        

                        if trendict['p손절'] == 1 and trendict['pSiKo'] == 0:
                            print("시가 고가 손절매도 %s Main.balance_dict"% Main.balance_dict)
                            Main.매수 = False
                            trendict.update = ({'c손절':0})
                            print("[%s] Put 가격 변동 확인됨 --- Call 손절 주문" % oCode)
                            sState = Main.kiwoom.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,int,QString,QString)",["매도","2000",Main.Number,oCode,'1','1','3',oq,'0',''])
                            if sState != 0:
                                print("%s 매도주문 실패" % oCode)
                            else:
                                Main.balance_dict = {}
                                print("%s 매도주문 성공" % oCode)
                                bState = Main.kiwoom.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,int,QString,QString)",["매수","2000",Main.Number,real_dict['pCode'],'1','2','1',수량,real_dict['pbHoka'],'0'])
                                if bState == 0:
                                    print("%s 매수주문 성공"%real_dict['pCode'])
                                else:
                                    print("%s 매수주문 실패"%real_dict['pCode'])

                    if real_dict['pCode'] == oCode: # 풋 매도
                        ea2 = (real_dict['pPrice']*qh*250000)
                        Main.balance_dict.update({'평가금액':int(ea2)})
                        Main.balance_dict.update({'현재가':real_dict['pPrice']})
                        ror = round((((ea2-ca)/ca*100) - 0.31),2)
                        Main.balance_dict.update({'수익률':ror})

                        if trendict['c손절'] == 1 and trendict['cSiKo'] == 0:
                            print("시가 고가 손절매도 %s Main.balance_dict"% Main.balance_dict)
                            Main.매수 = False
                            trendict.update = ({'p손절':0})
                            print("[%s] Call 가격 변동 확인됨 --- Put 손절 주문" % oCode)
                            sState = Main.kiwoom.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,int,QString,QString)",["매도","2000",Main.Number,oCode,'1','1','3',oq,'0',''])
                            if sState != 0:
                                print("%s 매도주문 실패" % oCode)
                                bState = Main.kiwoom.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,int,QString,QString)",["매수","2000",Main.Number,real_dict['cCode'],'1','2','1',수량,real_dict['cbHoka'],'0'])
                                if bState == 0:
                                    print("%s 매수주문 성공"%real_dict['cCode'])
                                else:
                                    print("%s 매수주문 실패"%real_dict['cCode'])
                            else:
                                Main.balance_dict = {}
                                print("%s 매도주문 성공" % oCode)


                        if (ror <= 손절) or (ror >= 이익) or (real_dict['pPrice'] == real_dict['pLow2']): # 수익률 매도
                            print("[%s] 수익률: %s 매도 주문 시작" % (oCode,ror))
                            Main.매수 = False
                            sState = Main.kiwoom.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,QString,QString,QString)",["매도","2000",Main.Number,oCode,'1','1','3',oq,'0',''])
                            if sState != 0:
                                print("%s 매도주문 실패" % oCode)
                            else:
                                Main.balance_dict = {}
                                print("%s 매도주문 성공" % oCode)

                        풋수 = ("풋 수익률: %s" % ror)
                        print(풋수)


                if oCode != (real_dict['cCode'] and real_dict['pCode']):
                    if (수익률 <= 손절) or (수익률 >= 이익):
                        sState = Main.kiwoom.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,QString,QString,QString)",["매도","2000",Main.Number,oCode,'1','1','3',oq,'0',''])
                        if sState != 0:
                            print("%s 매도주문 실패" % oCode)
                        else:
                            Main.balance_dict = {}
                            print("%s 매도주문 성공" % oCode)
                else:
                    Main.매수 = True


if __name__ == "__main__":
    app  = QApplication(sys.argv)
    Main()
    app.exec_()
