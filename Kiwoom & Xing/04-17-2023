import pythoncom,threading,time,sys
import win32com.client as win32com
from PyQt5.QAxContainer import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from errorCode import *
from Info import *


class HTS:
    login_state = 0
    def OnLogin(self, szCode, szMsg):
        if szCode == "0000":
            HTS.login_state = 1
        else:
            print("[X] HTS Login failed !!! {%s: %s}\n" % (szCode,szMsg))

class Trend:
    t = None
    scCode = {}
    spCode = {}
    t2301 = None
    매수 = False
    정정 = False
    cCode = ""
    pCode = ""
    cPrice = 0
    pPrice = 0
    cnt1 = 0
    cnt2 = 0
    sigo1 = 0
    sigo2 = 0
    vol = 0
    최저 = 0
    최고 = 0
            
    def OnReceiveData(self,trCode):

        if trCode == 't2105':
            dvol = self.GetFieldData("t2105OutBlock", "dvol", 0) # 매도 호가 총 잔량
            svol = self.GetFieldData("t2105OutBlock", "svol", 0) # 매수 호가 총 잔량
            Trend.vol = int(svol) - int(dvol)
            if Trend.최저 > Trend.vol:
                Trend.최저 = Trend.vol
            if Trend.최고 < Trend.vol:
                Trend.최고 = Trend.vol
            trendict.update({'순매수량':Trend.vol})
            threading.Timer(1,Main.request_hoka).start()

        else:                                 
            cnt2301 = self.GetBlockCount("t2301OutBlock1")
            for i in range(cnt2301):
                optcode1 = self.GetFieldData("t2301OutBlock1", "optcode", i) # Call 행사가        
                optcode2 = self.GetFieldData("t2301OutBlock2", "optcode", i) # Put 행사가 
                
                open1 = self.GetFieldData("t2301OutBlock1", "open", i) # 시가          
                if open1 != (''):
                    open1 = float(open1)
                if open1 == 0:
                    open1 = int(open1)
                        
                high1 = self.GetFieldData("t2301OutBlock1", "high", i) # 고가
                if high1 != (''):
                    high1 = float(high1) 
                if high1 == 0:
                    high1 = int(high1)       
                                        
                price1 = self.GetFieldData("t2301OutBlock1", "price", i) # 현재가(종가)   
                if price1 != (''):
                    price1 = float(price1)  
                if price1 == 0:
                    price1 = int(price1)      
                                            
                bidho1 = self.GetFieldData("t2301OutBlock1", "bidho1", i) # C매수호가     
                if bidho1 != (''):
                    bidho1 = float(bidho1) 
                if bidho1 == 0:
                    bidho1 = int(bidho1)     
                                                
                open2 = self.GetFieldData("t2301OutBlock2", "open", i) # 시가
                if open2 != (''):
                    open2 = float(open2) 
                if open2 == 0:
                    open2 = int(open2)     
                                        
                high2 = self.GetFieldData("t2301OutBlock2", "high", i) # 고가
                if high2 != (''):
                    high2 = float(high2)   
                if high2 == 0:
                    high2 = int(high2)      
                                    
                price2 = self.GetFieldData("t2301OutBlock2", "price", i) # 현재가(종가)
                if price2 != (''):
                    price2 = float(price2) 
                if price2 == 0:
                    price2 = int(price2)       
                                        
                bidho2 = self.GetFieldData("t2301OutBlock2", "bidho1", i) # P매수호가
                if bidho2 != (''):
                    bidho2 = float(bidho2)      
                if bidho2 == 0:
                    bidho2 = int(bidho2)       
                    
                # 시가 고가                   
                if (int(cnt2301)-1) != i: # 시가 고가 갯수 확인
                    if (sigo_max >= (open1 and high1) >= sigo_min) and open1 == high1:
                        trendict.update({'c손절':1})
                        Trend.cnt1 += 1
                        Trend.sigo1 = Trend.cnt1
                        
                    elif (sigo_max >= (open2 and high2) >= sigo_min) and open2 == high2:
                        trendict.update({'p손절':1})
                        Trend.cnt2 += 1
                        Trend.sigo2 = Trend.cnt2   
                        
                    if 0 == trendict['cSiKo'] < trendict['pSiKo']:
                        trendict.update({'추세':1})

                    elif trendict['cSiKo'] > trendict['pSiKo'] == 0:
                        trendict.update({'추세':2})

                    elif trendict['cSiKo'] == trendict['pSiKo']:
                        if trendict['cSiKo'] == 0:
                            trendict.update({'추세':0})
                        else:
                            trendict.update({'추세':-1})
                        
                
                if (int(cnt2301)-2) == i: # 중첩해서 카운트하지 않도록 초기화
                    trendict.update({'cSiKo':Trend.sigo1,'pSiKo':Trend.sigo2})
                    Trend.cnt1 = 0
                    Trend.cnt2 = 0
                    

                # 매매할 종목코드 & 매수호가
                if (bas_max >= price1 >= bas_min) and (optcode1[0:1] == "2"): # Call                    
                    Trend.scCode.update({optcode1:bidho1})
                    if len(Trend.scCode.keys()) == 1:
                        Trend.cCode = list(Trend.scCode.keys())[0]
                        Trend.cPrice = Trend.scCode[Trend.cCode]

                    else:
                        l = (list(Trend.scCode.keys()))
                        Trend.cCode = l[0]
                        Trend.cPrice = Trend.scCode[Trend.cCode]

                    if Trend.cCode != trendict['cCode']:
                        trendict.update({'cCode':Trend.cCode})
                    else:
                        trendict.update({'cPrice':Trend.cPrice})                           

                           
                if (bas_max >= price2 >= bas_min) and (optcode2[0:1] == "3"): # Put
                    Trend.spCode.update({optcode2:bidho2})
                    if len(Trend.spCode.keys()) == 1:
                        Trend.pCode = list(Trend.spCode.keys())[0]
                        Trend.pPrice = Trend.spCode[Trend.pCode]

                    else:
                        s = (list(Trend.spCode.keys()))
                        s.reverse()
                        Trend.pCode = s[0]
                        Trend.pPrice = Trend.spCode[Trend.pCode]

                    if Trend.pCode != trendict['pCode']:
                        trendict.update({'pCode':Trend.pCode})
                    else:
                        trendict.update({'pPrice':Trend.pPrice})
                    
                
                if Main.balance_dict == {} and Trend.매수 == False: # 매수 및 정정
                    if (trendict['추세'] == 1) and (trendict['순매수량'] > c호가):
                        buy = list(trendict.values())[1]
                        Trend.매수 = True
                        print("Call 매수 시작")
                        order_success = Main.kiwoom.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,int,QString,QString)",["매수","2000",Main.Number,trendict['cCode'],'1','2','1',수량,buy,'0'])
                        if order_success == 0:
                            print("%s 매수주문 전달 성공" % trendict['cCode'])
                        else:
                            print("%s 매수주문 전달 실패" % trendict['cCode'])


                    if (trendict['추세'] == 2) and (trendict['순매수량'] < p호가):
                        buy = list(trendict.values())[3]
                        Trend.매수 = True
                        print("Put 매수 시작")
                        order_success = Main.kiwoom.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,int,QString,QString)",["매수","2000",Main.Number,trendict['pCode'],'1','2','1',수량,buy,'0'])
                        if order_success == 0:
                            print("%s 매수주문 전달 성공" % trendict['pCode'])
                        else:
                            print("%s 매수주문 전달 실패" % trendict['pCode'])

                    if (Trend.정정 == False) and (Main.revise_order_dict != {}) and (Main.revise_order_dict['종목코드'] not in Main.balance_dict.values()): # 주문 정정

                        if str(Main.revise_order_dict['주문수량']) == str(Main.revise_order_dict['미체결수량']) and Main.revise_order_dict['구분'] == "매수":
                            rCode = Main.revise_order_dict['종목코드']
                            rOrderNo = Main.revise_order_dict['주문번호']
                            rOP = Main.revise_order_dict['주문가격']
                            rPrice = Main.revise_order_dict['매수호가']
                            rUq= Main.revise_order_dict['미체결수량']
                            price = Main.revise_order_dict['현재가']

                            if float(price) > float(rOP) + OCR:
                                Trend.정정 = True
                                print("%s 정정 주문 시작"% rCode)
                                order_success = Main.kiwoom.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,int,QString,QString)",["주문정정","3000",Main.Number,rCode,'2','2','1',rUq,rPrice,rOrderNo])
                                if order_success == 0:
                                    print("%s 정정주문 전달 성공" % rCode)
                                    Main.revise_order_dict = {}
                                else:
                                    print("%s 정정주문 전달 실패" % rCode)
           
            
                if Main.balance_dict != {}:# 매도
                    if Trend.매수 == True: 
                        oCode = Main.balance_dict['종목코드']
                        qh = Main.balance_dict['보유수량']
                        qh = int(qh)
                        ca = int(Main.balance_dict['약정금액'])
                        oq = int(Main.balance_dict['주문가능수량'])                        
                            
                        if optcode1 == oCode:
                            ea1 = (price1*qh*250000)
                            Main.balance_dict.update({'평가금액':ea1})
                            Main.balance_dict.update({'현재가':price1})
                            ror = round((((ea1-ca)/ca*100) - 0.33),2)
                            Main.balance_dict.update({'수익률':ror})  
                            if trendict['p손절'] == 1 and trendict['pSiKo'] == 0:# 콜 매도
                                print("시가 고가 손절매도 %s Main.balance_dict"%Main.balance_dict)
                                Trend.매수 = False
                                print("[%s] Put 가격 변동 확인됨 --- Call 손절 주문" % oCode)
                                sOrder_success = Main.kiwoom.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,int,QString,QString)",["매도","2000",Main.Number,oCode,'1','1','3',oq,'0',''])
                                bOrder_success = Main.kiwoom.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,int,QString,QString)",["매수","2000",Main.Number,trendict['pCode'],'1','1','3',oq,'0',''])
                                if sOrder_success == 0:
                                    print("%s 매도주문 전달 성공" % oCode)
                                    Main.balance_dict = {}
                                else:
                                    print("%s 매도주문 전달 실패" % oCode)      

                                if bOrder_success == 0:
                                    print("%s 매수주문 전달 성공" % oCode)
                                    Main.balance_dict = {}
                                else:
                                    print("%s 매수주문 전달 실패" % oCode)                                          
                                
                            if (ror <= 손절) or (ror >= 이익): # 수익률 매도
                                print("[%s] 수익률: %s 매도 주문 시작" % (oCode,ror))
                                Trend.매수 = False
                                sOrder_success = Main.kiwoom.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,QString,QString,QString)",["매도","2000",Main.Number,oCode,'1','1','3',oq,'0',''])  
                                                      
                                if sOrder_success == 0:
                                    print("%s 매도주문 전달 성공" % oCode)
                                    Main.balance_dict = {}
                                else:
                                    print("%s 매도주문 전달 실패" % oCode)      
                                
                                                                                                          
                        elif optcode2 == oCode:          
                            ea2 = (price2*qh*250000)
                            Main.balance_dict.update({'평가금액':int(ea2)})
                            Main.balance_dict.update({'현재가':price2})
                            ror = round((((ea2-ca)/ca*100) - 0.33),2)
                            Main.balance_dict.update({'수익률':ror})
                            
                            if trendict['c손절'] == 1 and trendict['cSiKo'] == 0:# 풋 매도
                                print("시가 고가 손절매도 %s Main.balance_dict"% Main.balance_dict)
                                Trend.매수 = False
                                print("[%s] Call 가격 변동 확인됨 --- Put 손절 주문" % oCode)
                                sOrder_success = Main.kiwoom.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,int,QString,QString)",["매도","2000",Main.Number,oCode,'1','1','3',oq,'0',''])
                                bOrder_success = Main.kiwoom.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,int,QString,QString)",["매수","2000",Main.Number,trendict['cCode'],'1','1','3',oq,'0','']) 

                                if sOrder_success == 0:
                                    print("%s 매도주문 전달 성공" % oCode)
                                    Main.balance_dict = {}
                                else:
                                    print("%s 매도주문 전달 실패" % oCode)      

                                if bOrder_success == 0:
                                    print("%s 매수주문 전달 성공" % oCode)
                                    Main.balance_dict = {}
                                else:
                                    print("%s 매수주문 전달 실패" % oCode)    
                                    
                                                                                            
                            if (ror <= 손절) or (ror >= 이익): # 수익률 매도
                                print("[%s] 수익률: %s 매도 주문 시작" % (oCode,ror))
                                Trend.매수 = False
                                sOrder_success = Main.kiwoom.dynamicCall("SendOrderFO(QString,QString,QString,QString,QString,QString,QString,QString,QString,QString)",["매도","2000",Main.Number,oCode,'1','1','3',oq,'0',''])
                            
                                if sOrder_success == 0:
                                    print("%s 매도주문 전달 성공" % oCode)
                                    Main.balance_dict = {}
                                else:
                                    print("%s 매도주문 전달 실패" % oCode)                                    
                    else:
                        Trend.매수 = True
    

            threading.Timer(1,Main.request_option_table,args=[when]).start()     
            Main.request_tr_balance()
            # print(trendict)

class Main(QAxWidget):
    
    revise_order_dict = {}
    balance_dict = {}
    Number = ""
    def __init__(self): 
        self.app = QApplication(sys.argv)
        super().__init__()
        Main.login_event_loop = QEventLoop()
        
        Main.kiwoom = QAxWidget("KHOPENAPI.KHOpenAPICtrl.1")
        
        Main.event_slots()
        Main.real_event_slot()
        Main.request_login_kiwoom()
        Main.request_login_info()
        Main.request_tr_balance()
        
        Xing_hts = win32com.DispatchWithEvents("XA_Session.XASession", HTS)
        
        Trend.t = win32com.DispatchWithEvents("XA_DataSet.XAQuery", Trend)
        Trend.t.ResFileName = "C:/eBEST/xingAPI/Res/t2105.res"
        
        Trend.t2301 = win32com.DispatchWithEvents("XA_DataSet.XAQuery", Trend)
        Trend.t2301.ResFileName = "C:/eBEST/xingAPI/Res/t2301.res"

        Xing_hts.ConnectServer("hts.ebestsec.co.kr", 20001)

        if Xing_hts.Login(ID, hts_pw, Cert_pw, 0, True) is True:
            pass
        else:
            nErrCode = Xing_hts.GetLastError()
            strErrMsg = Xing_hts.GetErrorMessage(nErrCode)
            print("\n[X] HTS Server Connection Failed !!! {%s: %s}" % (nErrCode, strErrMsg))
        while HTS.login_state == 0:
            pythoncom.PumpWaitingMessages()
            
        Main.request_hoka()
        Main.request_option_table(yyyymm=when)
        while True:
            pythoncom.PumpWaitingMessages()


    def event_slots():
        Main.kiwoom.OnEventConnect.connect(Main.login_slot)
        Main.kiwoom.OnReceiveTrData.connect(Main.trdata_slot)

              
    def real_event_slot():
        Main.kiwoom.OnReceiveChejanData.connect(Main.chejan_slot) 
        
        
    def request_login_kiwoom():
        Main.kiwoom.dynamicCall("CommConnect()")
        Main.login_event_loop.exec_()
        
        
    def login_slot(err_code):
        print(errors(err_code)[1])
        Main.login_event_loop.exit()
        
        
    def request_login_info():
        num = Main.kiwoom.dynamicCall("GetLoginInfo(QString)","ACCLIST") # or "ACCNO" / 계좌번호
        Main.Number = num[:-1]
        user = Main.kiwoom.dynamicCall("GetLoginInfo(QString)","USER_NAME") # 사용자 이름
        print("\n%s님의 계좌번호 %s\n" % (user,Main.Number))
        
    
    def request_tr_balance():
        time.sleep(2)
        Main.kiwoom.dynamicCall("SetInputValue(QString,QString)","계좌번호",Main.Number)
        Main.kiwoom.dynamicCall("SetInputValue(QString,QString)","비밀번호",demo_acc_pw)
        Main.kiwoom.dynamicCall("SetInputValue(QString,QString)","비밀번호입력매체구분","00")
        Main.kiwoom.dynamicCall("CommRqData(QString,QString,QString,QString)","선옵잔고요청","opw20007","0","1000")

        
    def trdata_slot(sScrNo, sRQName, sTrCode, sRecordName, sPrevNext):
        
        if sRQName == "선옵잔고요청":

            rows = Main.kiwoom.dynamicCall("GetRepeatCnt(QString, QString)", sTrCode, sRQName)

            if rows > 0: # 잔고에 있을 때
                for i in range(rows):
                    oCode = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, i, "종목코드")
                    oCode = oCode.strip()
                    
                    medosu = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, i, "매도매수구분") # 1:매도,2:매수
                    if medosu == '2':
                        medosu = '매수'
                    else:
                        '매도'
                    quantity_held = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, i, "수량")
                    qh = int(quantity_held)

                    orderable_quantity = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, i, "청산가능수량")
                    oq = int(orderable_quantity)
                    
                    buy_price = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, i, "매입단가")
                    bp = round(float(buy_price)*0.001,2)

                    price = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, i, "현재가")
                    p = round(float(price)*0.001,2)
                                            
                    contract_amount = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, i, "약정금액")
                    ca = int(contract_amount)
                    
                    evaluation_amount = Main.kiwoom.dynamicCall("GetCommData(QString,QString,int,QString)", sTrCode, sRQName, i, "평가금액")
                    ea = int(evaluation_amount)
                    
                    ror = round((((ea-ca)/ca*100) - 0.33),2)

                    Main.balance_dict.update({'종목코드': oCode,'구분':medosu,'보유수량':qh,'주문가능수량':oq,'매입단가':bp,'현재가':p,'약정금액':ca,'평가금액':ea,'수익률':ror})
            else:
                if Main.balance_dict != {}:
                    Main.balance_dict = {}
                                                    
    @staticmethod
    def request_hoka():
        Trend.t.SetFieldData("t2105InBlock", "shcode", 0, fCode)
        Trend.t.Request(False)
            
                                     
    @staticmethod
    def request_option_table(yyyymm=None):
        Trend.t2301.SetFieldData("t2301InBlock", "yyyymm", 0, yyyymm)
        Trend.t2301.SetFieldData("t2301InBlock", "gubun", 0, "G")
        Trend.t2301.Request(False)

                
    def chejan_slot(Gubun, nItemCnt, sFidList):
         
        if int(Gubun) == 0: # 접수와 체결

            oCode = Main.kiwoom.dynamicCall("GetChejanData(int)", 9001) # 종목코드
            
            medosu = Main.kiwoom.dynamicCall("GetChejanData(int)", 905) # 구분
            medosu = medosu.strip().lstrip('+').lstrip('-')
            
            order_number = Main.kiwoom.dynamicCall("GetChejanData(int)", 9203) # 주문번호
            on = int(order_number)
            
            order_q = Main.kiwoom.dynamicCall("GetChejanData(int)", 900) # 주문수량
            
            un_quan = Main.kiwoom.dynamicCall("GetChejanData(int)", 902) # 미체결수량
            un_quan = int(un_quan)     
            
            one_order_number = Main.kiwoom.dynamicCall("GetChejanData(int)", 904) # 원주문번호
            oon = int(one_order_number)
            
            order_price = Main.kiwoom.dynamicCall("GetChejanData(int)", 901) # 주문가격
          
            price = Main.kiwoom.dynamicCall("GetChejanData(int)", 10) # 현재가
            
            rPrice1 = Main.kiwoom.dynamicCall("GetChejanData(int)", 28) # 최우선 매수호가1
             
            if un_quan == 0 and (("취소" not in medosu)):
                print("\n%s 체결 | No.%s | %s | 주문가: %s | 주문수량: %s개 | 미체결량: %s개"%(medosu,on,oCode,order_price,order_q,un_quan))
            else:
                Main.revise_order_dict = ({'종목코드':oCode,'구분':medosu,'주문번호':on,'주문수량':order_q,'주문가격':order_price,'미체결수량':un_quan,'원주문번호':oon,'매수호가':rPrice1,'현재가':price})
                print("\n%s 접수 | No.%s | %s | 주문가: %s | 주문수량: %s개 | 미체결량: %s개 | 현재가: %s"%(medosu,on,oCode,order_price,order_q,un_quan,price))
        
if __name__ == "__main__":
    Main()
